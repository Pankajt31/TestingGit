<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testCase id="20">
  <summary/>
  <steps>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="3" title="Set Values: x">
      <arguments>
        <argument id="values">
          <value class="valueList" mutable="Mutable">
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">x</value>
              </namedValue>
              <namedValue name="value">
                <value class="funcCall" id="UniqueId">
                  <argument id="length">
                    <value class="value" valueClass="decimal">2</value>
                  </argument>
                  <argument id="format">
                    <value class="value" valueClass="string">NUMERIC</value>
                  </argument>
                </value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
          </value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.DoWhile" name="DoWhile" testItemId="1" title="While: {x &gt; &quot;20&quot;}">
      <arguments>
        <argument id="condition">
          <value class="gt">
            <lhs class="variable">
              <path element="x"/>
            </lhs>
            <rhs class="value" valueClass="string">20</rhs>
          </value>
        </argument>
        <argument id="counterName">
          <value class="value" valueClass="string">LoopCounter</value>
        </argument>
        <argument id="counterStart">
          <value class="value" valueClass="decimal">10</value>
        </argument>
        <argument id="counterEnd">
          <value class="value" valueClass="decimal">99</value>
        </argument>
        <argument id="continueOnFailure"/>
      </arguments>
      <clauses>
        <clause name="substeps" testItemId="2">
          <steps>
            <apiCall apiId="com.provar.plugins.bundled.apis.AssertValues" name="AssertValues" testItemId="4" title="Assert: {x} GreaterThan 20">
              <arguments>
                <argument id="expectedValue">
                  <value class="variable">
                    <path element="x"/>
                  </value>
                </argument>
                <argument id="actualValue">
                  <value class="value" valueClass="string">20</value>
                </argument>
                <argument id="comparisonType">
                  <value class="value" valueClass="string">GreaterThan</value>
                </argument>
                <argument id="caseSensitive">
                  <value class="value" valueClass="boolean">true</value>
                </argument>
                <argument id="numeric">
                  <value class="value" valueClass="boolean">true</value>
                </argument>
                <argument id="retainDecimals">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="nullGreater">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="matchMultiLine">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="matchDotAll">
                  <value class="value" valueClass="boolean">false</value>
                </argument>
                <argument id="failureMessage"/>
              </arguments>
            </apiCall>
            <apiCall apiId="com.provar.plugins.bundled.apis.control.Break" name="Break" testItemId="6"/>
            <apiCall apiId="com.provar.plugins.bundled.apis.control.Fail" name="Fail" testItemId="8" title="Fail Test: The loop died">
              <arguments>
                <argument id="message">
                  <value class="value" valueClass="string">The loop died</value>
                </argument>
              </arguments>
            </apiCall>
          </steps>
        </clause>
      </clauses>
    </apiCall>
  </steps>
</testCase>
