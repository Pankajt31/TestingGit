<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testCase id="8">
  <summary/>
  <steps>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="16" title="Set Values: var.Name, var.Type, var.Id">
      <arguments>
        <argument id="values">
          <value class="valueList" mutable="Mutable">
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">var.Name</value>
              </namedValue>
              <namedValue name="value">
                <value class="funcCall" id="UniqueId"/>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">var.Type</value>
              </namedValue>
              <namedValue name="value">
                <value class="value" valueClass="string">Engineer11</value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">var.Id</value>
              </namedValue>
              <namedValue name="value">
                <value class="value" valueClass="string">5</value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
          </value>
        </argument>
      </arguments>
      <parameterValueSources/>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.io.Write" name="Write" testItemId="17" title="Write: {var}=&gt;excel:templates/NameData.xlsx?worksheet=Sheet3&amp;sheetMode=update">
      <arguments>
        <argument id="data">
          <value class="variable">
            <path element="var"/>
          </value>
        </argument>
        <argument id="dataUrl">
          <value class="urlTarget" uri="excel:templates/NameData.xlsx?worksheet=Sheet3&amp;sheetMode=update"/>
        </argument>
        <argument id="targetDescription">
          <value class="value" valueClass="string">excel:templates/NameData.xlsx?worksheet=Sheet3&amp;sheetMode=update</value>
        </argument>
        <argument id="updateValueRange">
          <value class="value" valueClass="string">A1:Z100</value>
        </argument>
        <argument id="updateColumnNames">
          <value class="value" valueClass="string">FirstRowOfRange</value>
        </argument>
        <argument id="updateMatchType">
          <value class="value" valueClass="string">RowOrColNumber</value>
        </argument>
        <argument id="updateMatchLocator">
          <value class="value" valueClass="string">2</value>
        </argument>
      </arguments>
      <parameterValueSources/>
      <generatedParameters>
        <apiParam group="result" name="updateValueRange" title="Values Range">
          <summary>The range of cells that needs to updated. If nothing is specified entire sheet is targeted</summary>
          <type>
            <textType/>
          </type>
        </apiParam>
        <apiParam group="result" name="updateColumnNames" title="Column Names">
          <summary>Identifies where the column names are in the spreadsheet:</summary>
          <defaultValue>FirstRowOfRange</defaultValue>
          <type>
            <choiceType>
              <constraints>
                <valueConstraint name="boundedValues">FirstRowOfRange:Across the first row|FirstColumnOfRange:Down the first column</valueConstraint>
              </constraints>
            </choiceType>
          </type>
        </apiParam>
        <apiParam group="result" internal="true" name="updateMatchType" title="">
          <summary/>
          <defaultValue>RowOrColNumber</defaultValue>
          <type>
            <choiceType>
              <constraints>
                <valueConstraint name="boundedValues">RowOrColNumber:Match by Position|Where:Match on Condition|MatchColumns:Match by Columns</valueConstraint>
              </constraints>
            </choiceType>
          </type>
        </apiParam>
        <apiParam group="result" manuallyResolved="true" name="updateMatchLocator" title="Match Locator">
          <summary>Identifies which rows in the Range will be updated. \n It can either be a row number (where the first row = 1) or a filtering condition against one or more columns (e.g. {firstName = "Joe" and surname = "Bloggs"}.</summary>
        </apiParam>
      </generatedParameters>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.StepGroup" name="StepGroup" testItemId="22" title="ReadExcel">
      <arguments>
        <argument id="description">
          <value class="value" valueClass="string">ReadExcel</value>
        </argument>
      </arguments>
      <parameterValueSources>
        <parameterValueSource url="excel:templates/NameData.xlsx?worksheet=Sheet3&amp;range=A1%3AD3&amp;namesLocation=FirstRowOfRange&amp;whereComparison=EqualTo" variableName="ExcelData" variableScope="Test">
          <cacheToken>F:/Regression51/test/templates/NameData.xlsx;1448883557263</cacheToken>
          <cachedParameters>
            <apiParam name="RowNumber"/>
            <apiParam name="Name"/>
            <apiParam name="Type"/>
            <apiParam name="City"/>
            <apiParam name="Id"/>
          </cachedParameters>
        </parameterValueSource>
      </parameterValueSources>
      <clauses>
        <clause name="hidden" testItemId="23"/>
      </clauses>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.AssertValues" name="AssertValues" testItemId="24" title="Assert: {var.Name} EqualTo {ExcelData.Name}">
      <arguments>
        <argument id="expectedValue">
          <value class="variable">
            <path element="var"/>
            <path element="Name"/>
          </value>
        </argument>
        <argument id="actualValue">
          <value class="variable">
            <path element="ExcelData"/>
            <path element="Name"/>
          </value>
        </argument>
        <argument id="comparisonType">
          <value class="value" valueClass="string">EqualTo</value>
        </argument>
        <argument id="caseSensitive">
          <value class="value" valueClass="boolean">true</value>
        </argument>
        <argument id="numeric">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="retainDecimals">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="nullGreater">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="matchMultiLine">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="matchDotAll">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="failureMessage"/>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.AssertValues" name="AssertValues" testItemId="25" title="Assert: {var.Id} EqualTo {ExcelData[2].Id}">
      <arguments>
        <argument id="expectedValue">
          <value class="variable">
            <path element="var"/>
            <path element="Id"/>
          </value>
        </argument>
        <argument id="actualValue">
          <value class="variable">
            <path element="ExcelData">
              <filter class="index">
                <index valueClass="decimal">1</index>
              </filter>
            </path>
            <path element="Id"/>
          </value>
        </argument>
        <argument id="comparisonType">
          <value class="value" valueClass="string">EqualTo</value>
        </argument>
        <argument id="caseSensitive">
          <value class="value" valueClass="boolean">true</value>
        </argument>
        <argument id="numeric">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="retainDecimals">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="nullGreater">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="matchMultiLine">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="matchDotAll">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="failureMessage"/>
      </arguments>
    </apiCall>
  </steps>
  <tags/>
</testCase>
