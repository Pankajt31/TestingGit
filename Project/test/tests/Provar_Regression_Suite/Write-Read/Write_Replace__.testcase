<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testCase id="6">
  <summary/>
  <steps>
    <apiCall apiId="com.provar.plugins.bundled.apis.io.Read" name="Read" testItemId="9" title="Read: templates/Split_CommaSperated..txt=&gt;Contents">
      <tags/>
      <arguments>
        <argument id="urlString">
          <value class="url">templates/Split_CommaSperated..txt</value>
        </argument>
        <argument id="contentFormat">
          <value class="value" valueClass="string">Text</value>
        </argument>
        <argument id="contentEncoding">
          <value class="value" valueClass="string">Default</value>
        </argument>
        <argument id="resultName">
          <value class="value" valueClass="string">Contents</value>
        </argument>
        <argument id="resultScope">
          <value class="value" valueClass="string">Test</value>
        </argument>
        <argument id="storeAs">
          <value class="value" valueClass="string">Text</value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.string.Split" name="Split" testItemId="13" title="Split: {Contents}=&gt;,=&gt;Tokens">
      <arguments>
        <argument id="input">
          <value class="variable">
            <path element="Contents"/>
          </value>
        </argument>
        <argument id="separator">
          <value class="value" valueClass="string">,</value>
        </argument>
        <argument id="resultName">
          <value class="value" valueClass="string">Tokens</value>
        </argument>
        <argument id="resultScope">
          <value class="value" valueClass="string">Test</value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.io.Write" name="Write" testItemId="12" title="Write: {Tokens}=&gt;excel:templates/WriteWorkBook.xlsx?worksheet=Sheet1&amp;sheetMode=overwrite">
      <arguments>
        <argument id="data">
          <value class="variable">
            <path element="Tokens"/>
          </value>
        </argument>
        <argument id="dataUrl">
          <value class="excelTarget" created="0" sheetWriteMode="Overwrite" updated="0">
            <workbookPath class="value" valueClass="string">templates/WriteWorkBook.xlsx</workbookPath>
            <worksheetName class="value" valueClass="string">Sheet1</worksheetName>
          </value>
        </argument>
        <argument id="targetDescription">
          <value class="value" valueClass="string">excel:templates/WriteWorkBook.xlsx?worksheet=Sheet1&amp;sheetMode=overwrite</value>
        </argument>
      </arguments>
      <generatedParameters/>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.StepGroup" name="StepGroup" testItemId="21" title="ReadExcel">
      <arguments>
        <argument id="description">
          <value class="value" valueClass="string">ReadExcel</value>
        </argument>
      </arguments>
      <parameterValueSources>
        <parameterValueSource variableName="ExcelData" variableScope="Test">
          <cacheToken>C:/Users/SAURABH/Provar/REGreSSion new2/test/templates/WriteWorkBook.xlsx;1490168036513</cacheToken>
          <cachedParameters>
            <apiParam name="RowNumber"/>
            <apiParam name="ApacheHadoopIsAnOpenSource"/>
          </cachedParameters>
          <sourceValue class="excelTarget" created="0" namesLocation="FirstRowOfRange" updated="0" whereComparison="EqualTo">
            <workbookPath class="value" valueClass="string">templates/WriteWorkBook.xlsx</workbookPath>
            <worksheetName class="value" valueClass="string">Sheet4</worksheetName>
            <valuesRange class="value" valueClass="string">A2:A8</valuesRange>
          </sourceValue>
        </parameterValueSource>
      </parameterValueSources>
      <clauses>
        <clause name="hidden" testItemId="22"/>
      </clauses>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="16" title="Set Values: Value">
      <arguments>
        <argument id="values">
          <value class="valueList" mutable="Mutable">
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">Value</value>
              </namedValue>
              <namedValue name="value">
                <value class="value" valueClass="string"> software framework for distributed</value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
          </value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.AssertValues" name="AssertValues" testItemId="17" title="Assert: {ExcelData[1].ApacheHadoopIsAnOpenSource} EqualTo {Value}">
      <arguments>
        <argument id="expectedValue">
          <value class="variable">
            <path element="ExcelData">
              <filter class="index">
                <index valueClass="decimal">0</index>
              </filter>
            </path>
            <path element="ApacheHadoopIsAnOpenSource"/>
          </value>
        </argument>
        <argument id="actualValue">
          <value class="variable">
            <path element="Value"/>
          </value>
        </argument>
        <argument id="comparisonType">
          <value class="value" valueClass="string">EqualTo</value>
        </argument>
        <argument id="caseSensitive">
          <value class="value" valueClass="boolean">true</value>
        </argument>
        <argument id="numeric">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="retainDecimals">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="nullGreater">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="matchMultiLine">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="matchDotAll">
          <value class="value" valueClass="boolean">false</value>
        </argument>
        <argument id="failureMessage"/>
      </arguments>
    </apiCall>
  </steps>
  <tags/>
</testCase>
